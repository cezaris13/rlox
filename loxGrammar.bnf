<expression> ::= <literal>
               | <unary>
               | <grouping>
               | <binary>

<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<integer> ::= <digit>+
<number> ::= <integer> "." <digit>+
           | <integer>

<letter> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m"
           | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
           | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M"
           | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"

<string> ::= (<letter> | <digit>)*
<literal> ::= <number>
            | <string>
            | "true"
            | "false"
            | "nil"

<grouping> ::= "(" <expression> ")"
<unary> ::= ("-" | "!") <expression>
<binary> ::= <expression> <operator> <expression>

<operator> ::= "==" | "!=" | "<" | "<=" | ">" | ">=" | "+"  | "-" | "*" | "/"

;; version 2
<program> ::= <declaration>* <eof>

<declaration> ::= <variableDeclaration>
                | <statement>

<variableDeclaration> ::= "var " <identifier> ("=" <expression>) ";"

<statement> ::= <printStatement>
              | <expressionStatement>
              | <block>
              | <ifStatement>
              | <whileStatement>
              | <forStatement>

<printStatement> ::= "print " <expression> ";"

<expressionStatement> ::= <expression> ";"

<block> ::= "{" <declaration> "}"

<ifStatement> ::= "if" "(" <expression> ")" <statement>
                  ("else" <statement>)?

<whileStatement> ::= "while" "(" <expression> ")" <statement>

<forStatement> ::= "for" "(" (<variableDeclaration> | <expressionStatement> | ";")
                         <expression>? ";"
                         <expression>? ")" <statement>

<expression> ::= <assignment>

<assignment> ::= <identifier> "=" <assignment>
               | <logicalOr>

<logicalOr> ::= <logicalAnd> ("or" <logicalAnd>)*

<logicalAnd> ::= <equality> ("and" <equality>)*

<equality> ::= <comparison> ( ("==" | "!=") <comparison>)*

<comparison> ::= <term> ( (">" | "<" | ">=" | "<=") <term>)*

<term> ::= <factor> ( ("-" | "+") <factor> )*

<factor> ::= <unary> ( ("/" | "*") <unary> )*

<unary> ::= ("-" | "!") <unary>
          | <primary>

<primary> ::= <number>
            | <string>
            | "true"
            | "false"
            | "nil"
            | "(" <expression> ")"
            | <identifier>

<identifier> ::= (<letter> | <digit>)*

<number> ::= <integer> "." <digit>+
           | <integer>

<integer> ::= <digit>+

<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<string> ::= "\"" (<letter> | <digit>)* "\""

<letter> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m"
           | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
           | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M"
           | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"

;; in bnf checker this makes the checker fail, so \0 here is denoted as 0
<eof> ::= "0"
